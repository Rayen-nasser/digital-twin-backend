# Generated by Django 5.2 on 2025-04-18 09:25

import core.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import djongo.models.fields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'custom_users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ChatHistory',
            fields=[
                ('_id', djongo.models.fields.ObjectIdField(auto_created=True, primary_key=True, serialize=False)),
                ('twin_id', models.UUIDField()),
                ('user_id', models.UUIDField()),
                ('messages', djongo.models.fields.JSONField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'chat_histories',
                'ordering': ['-updated_at'],
                'indexes': [models.Index(fields=['twin_id'], name='twin_idx'), models.Index(fields=['user_id'], name='user_idx'), models.Index(fields=['updated_at'], name='updated_at_idx')],
            },
        ),
        migrations.CreateModel(
            name='MediaFile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('filename', models.CharField(max_length=255)),
                ('file_type', models.CharField(choices=[('image', 'Image'), ('audio', 'Audio'), ('document', 'Document')], max_length=50)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('size_mb', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50)])),
                ('path', models.CharField(max_length=512)),
                ('is_public', models.BooleanField(default=False)),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='media_files', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Media File',
                'verbose_name_plural': 'Media Files',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('content', models.TextField()),
                ('message_type', models.CharField(choices=[('text', 'Text'), ('image', 'Image'), ('audio', 'Audio')], default='text', max_length=10)),
                ('sender_type', models.CharField(choices=[('user', 'User'), ('twin', 'Twin')], max_length=10)),
                ('sender_id', models.UUIDField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_read', models.BooleanField(default=False)),
                ('metadata', djongo.models.fields.JSONField(default=core.models.Message.get_default_metadata)),
            ],
            options={
                'db_table': 'messages',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['sender_type', 'sender_id'], name='messages_sender__d0d511_idx'), models.Index(fields=['created_at'], name='messages_created_919c58_idx')],
            },
        ),
        migrations.CreateModel(
            name='AuthToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=255, unique=True)),
                ('expires_at', models.DateTimeField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='auth_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['token'], name='core_authto_token_434c69_idx'), models.Index(fields=['expires_at'], name='core_authto_expires_713117_idx')],
            },
        ),
        migrations.CreateModel(
            name='Twin',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('persona_data', models.JSONField(blank=True, default=core.models.Twin.get_default_persona_data, help_text='Structured persona data including description and conversation examples')),
                ('privacy_setting', models.CharField(choices=[('private', 'Private'), ('public', 'Public'), ('shared', 'Shared with selected users')], default='private', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('avatar', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.mediafile')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='twins', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Digital Twin',
                'verbose_name_plural': 'Digital Twins',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['owner'], name='core_twin_owner_i_d6c67e_idx'), models.Index(fields=['privacy_setting'], name='core_twin_privacy_0990fb_idx')],
            },
        ),
    ]
